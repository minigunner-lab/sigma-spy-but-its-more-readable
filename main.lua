local Configuration = {
	UseWorkspace = false, 
	NoActors = false,
	FolderName = "Sigma Spy",
	RepoUrl = "https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main",
	ParserUrl = "https://github.com/depthso/Roblox-parser/raw/32eb8e3ca74a1210d74ed0c54479b5147647a0e4"
}

local Parameters = {...}
local Overwrites = Parameters[1]
if typeof(Overwrites) == "table" then
	for Key, Value in Overwrites do
		Configuration[Key] = Value
	end
end

local Services = setmetatable({}, {
	__index = function(self, Name: string): Instance
		local Service = game:GetService(Name)
		return cloneref(Service)
	end,
})

local Files = loadstring(game:HttpGet("https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main/src/lib/Files.lua"))()
Files:PushConfig(Configuration)
Files:Init({
	Services = Services
})

local Folder = Files.FolderName
local Scripts = {
	Config = Files:GetModule(`{Folder}/Config`, "Config"),
	ReturnSpoofs = Files:GetModule(`{Folder}/Return spoofs`, "Return Spoofs"),
	Configuration = Configuration,
	Files = Files,
	Process = {"base64", ""},
	Hook = {"base64", ""},
	Flags = {"base64", "dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkKdHlwZSBGbGFnID0gewogICAgVmFsdWU6IEZsYWdWYWx1ZSwKICAgIExhYmVsOiBzdHJpbmcsCiAgICBDYXRlZ29yeTogc3RyaW5nCn0KdHlwZSBGbGFncyA9IHsKICAgIFtzdHJpbmddOiBGbGFnCn0KdHlwZSB0YWJsZSA9IHsKICAgIFthbnldOiBhbnkKfQoKbG9jYWwgTW9kdWxlID0gewogICAgRmxhZ3MgPSB7CiAgICAgICAgUHJldmVudFJlbmFtaW5nID0gewogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLAogICAgICAgICAgICBMYWJlbCA9ICJObyByZW5hbWluZyIsCiAgICAgICAgfSwKICAgICAgICBQcmV2ZW50UGFyZW50aW5nID0gewogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLAogICAgICAgICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLAogICAgICAgIH0sCiAgICAgICAgU2VsZWN0TmV3ZXN0ID0gewogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLAogICAgICAgICAgICBMYWJlbCA9ICJBdXRvIHNlbGVjdCBuZXdlc3QiLAogICAgICAgIH0sCiAgICAgICAgRGVjb21waWxlUG9wb3V0ID0geyAtLSBMb3ZyZSBTSFVTSAogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLAogICAgICAgICAgICBMYWJlbCA9ICJQb3Atb3V0IGRlY29tcGlsZXMiLAogICAgICAgIH0sCiAgICAgICAgSWdub3JlTmlsID0gewogICAgICAgICAgICBWYWx1ZSA9IHRydWUsCiAgICAgICAgICAgIExhYmVsID0gIklnbm9yZSBuaWwgcGFyZW50cyIsCiAgICAgICAgfSwKICAgICAgICBMb2dFeHBsb2l0ID0gewogICAgICAgICAgICBWYWx1ZSA9IHRydWUsCiAgICAgICAgICAgIExhYmVsID0gIkxvZyBleHBsb2l0IGNhbGxzIiwKICAgICAgICB9LAogICAgICAgIExvZ1JlY2l2ZXMgPSB7CiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwKICAgICAgICAgICAgTGFiZWwgPSAiTG9nIHJlY2VpdmVzIiwKICAgICAgICB9LAogICAgICAgIFBhdXNlZCA9IHsKICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwKICAgICAgICAgICAgTGFiZWwgPSAiUGF1c2VkIiwKICAgICAgICAgICAgS2V5YmluZCA9IEVudW0uS2V5Q29kZS5RCiAgICAgICAgfSwKICAgICAgICBLZXliaW5kc0VuYWJsZWQgPSB7CiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwKICAgICAgICAgICAgTGFiZWwgPSAiS2V5YmluZHMgRW5hYmxlZCIKICAgICAgICB9LAogICAgICAgIEZpbmRTdHJpbmdGb3JOYW1lID0gewogICAgICAgICAgICBWYWx1ZSA9IHRydWUsCiAgICAgICAgICAgIExhYmVsID0gIkZpbmQgYXJnIGZvciBuYW1lIgogICAgICAgIH0sCiAgICAgICAgVWlWaXNpYmxlID0gewogICAgICAgICAgICBWYWx1ZSA9IHRydWUsCiAgICAgICAgICAgIExhYmVsID0gIlVJIFZpc2libGUiLAogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlAKICAgICAgICB9LAogICAgICAgIE5vVHJlZU5vZGVzID0gewogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLAogICAgICAgICAgICBMYWJlbCA9ICJObyBncm91cGluZyIKICAgICAgICB9LAogICAgICAgIFRhYmxlQXJncyA9IHsKICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwKICAgICAgICAgICAgTGFiZWwgPSAiVGFibGUgYXJncyIKICAgICAgICB9LAogICAgICAgIE5vVmFyaWFibGVzID0gewogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLAogICAgICAgICAgICBMYWJlbCA9ICJObyBjb21wcmVzc2lvbiIKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFnVmFsdWUoTmFtZTogc3RyaW5nKTogRmxhZ1ZhbHVlCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpCiAgICByZXR1cm4gRmxhZy5WYWx1ZQplbmQKCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnVmFsdWUoTmFtZTogc3RyaW5nLCBWYWx1ZTogRmxhZ1ZhbHVlKQogICAgbG9jYWwgRmxhZyA9IHNlbGY6R2V0RmxhZyhOYW1lKQogICAgRmxhZy5WYWx1ZSA9IFZhbHVlCmVuZAoKZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFjayhOYW1lOiBzdHJpbmcsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkpCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpCiAgICBGbGFnLkNhbGxiYWNrID0gQ2FsbGJhY2sKZW5kCgpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ0NhbGxiYWNrcyhEaWN0OiB7fSkKICAgIGZvciBOYW1lLCBDYWxsYmFjazogKC4uLmFueSkgLT4gLi4uYW55IGluIG5leHQsIERpY3QgZG8gCiAgICAgICAgc2VsZjpTZXRGbGFnQ2FsbGJhY2soTmFtZSwgQ2FsbGJhY2spCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZyhOYW1lOiBzdHJpbmcpOiBGbGFnCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQogICAgbG9jYWwgRmxhZyA9IEFsbEZsYWdzW05hbWVdCiAgICBhc3NlcnQoRmxhZywgIkZsYWcgZG9lcyBub3QgZXhpc3QhIikKICAgIHJldHVybiBGbGFnCmVuZAoKZnVuY3Rpb24gTW9kdWxlOkFkZEZsYWcoTmFtZTogc3RyaW5nLCBGbGFnOiBGbGFnKQogICAgbG9jYWwgQWxsRmxhZ3MgPSBzZWxmOkdldEZsYWdzKCkKICAgIEFsbEZsYWdzW05hbWVdID0gRmxhZwplbmQKCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFncygpOiBGbGFncwogICAgcmV0dXJuIHNlbGYuRmxhZ3MKZW5kCgpyZXR1cm4gTW9kdWxl"},
	Ui = {"base64", ""},
	Generation = {"base64", ""},
	Communication = {"base64", ""}
}

local Players: Players = Services.Players

local Modules = Files:LoadLibraries(Scripts)
local Process = Modules.Process
local Hook = Modules.Hook
local Ui = Modules.Ui
local Generation = Modules.Generation
local Communication = Modules.Communication
local Config = Modules.Config

local FontContent = Files:GetAsset("ProggyClean.ttf", true)
local FontJsonFile = Files:CreateFont("ProggyClean", FontContent)
Ui:SetFontFile(FontJsonFile)

Process:CheckConfig(Config)
Files:LoadModules(Modules, {
	Modules = Modules,
	Services = Services
})

local Window = Ui:CreateMainWindow()

local Supported = Process:CheckIsSupported()
if not Supported then 
	Window:Close()
	return
end

local ChannelId, Event = Communication:CreateChannel()
Communication:AddCommCallback("QueueLog", function(...)
	Ui:QueueLog(...)
end)

local LocalPlayer = Players.LocalPlayer
Generation:SetSwapsCallback(function(self)
	self:AddSwap(LocalPlayer, {
		String = "LocalPlayer",
	})
	self:AddSwap(LocalPlayer.Character, {
		String = "Character",
		NextParent = LocalPlayer
	})
end)

Ui:CreateWindowContent(Window)
Ui:SetCommChannel(Event)
Ui:BeginLogService()

local ActorCode = Files:MakeActorScript(Scripts, ChannelId)
Hook:LoadHooks(ActorCode, ChannelId)
